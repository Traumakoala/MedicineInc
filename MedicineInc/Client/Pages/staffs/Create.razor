@page "/staffs/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Staff</h3>
<hr />
<br />

<EditForm Model="@staff" OnValidSubmit="CreateStaff">
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>

<div class="form-group">
    <label>Staff Name: </label>
    <div>
        <InputText @bind-Value="@staff.StaffName" class="form-control" />
        <ValidationMessage For="@(() => staff.StaffName)" />
    </div>
</div>
<div class="form-group">
    <label>Staff Email: </label>
    <div>
        <InputText @bind-Value="@staff.StaffEmail" class="form-control" />
        <ValidationMessage For="@(() => staff.StaffEmail)" />
    </div>
</div>
<div class="form-group">
    <label>Staff Phone Number: </label>
    <div>
        <InputNumber @bind-Value="@staff.StaffPhone" class="form-control" />
        <ValidationMessage For="@(() => staff.StaffPhone)" />
    </div>
</div>
<div class="form-group">
    <label>Manager Status: </label>
    <div>
        <InputCheckbox @bind-Value="@staff.IsManager" />
    </div>
</div>
@if (staff.IsManager)
{
    <div class="form-group">
        <label>Manager ID: </label>
        <div>
            <InputNumber @bind-Value="@staff.ManagerID" class="form-control" />
            <ValidationMessage For="@(() => staff.ManagerID)" />
        </div>
    </div>
}
<div class="form-group">
    <label>Branch: </label>
    <div>
        <InputSelect @bind-Value="staff.BranchID" class=" = form-control">
            <option value="">-- Select Branch --</option>
            @if (Branchs != null)
            {
                foreach (var branch in Branchs)
                {
                    <option value="@branch.Id">@branch.BranchName</option>
                }
            }
        </InputSelect>
    </div>
</div>

@code {
    Staff staff = new Staff();

    private IList<Staff>? Staffs;
    private IList<Branch>? Branchs;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndPoint}");
        Branchs = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchsEndPoint}");
    }

    private async Task CreateStaff()
    {
        await _client.PostAsJsonAsync(Endpoints.StaffsEndPoint, staff);
        _navManager.NavigateTo("/staffs/");
    }
}
