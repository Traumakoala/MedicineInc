@page "/cart"
@inject IJSRuntime js
@inject HttpClient _client

<h1>Your Shopping Cart</h1>
<link href="css/cart.css" rel="stylesheet">

@if (Carts != null && cart != null && cart.CartItems != null)
{
    <div class="cart-container">
        <ul class="cart-items">
            @foreach (var cartItem in cart.CartItems)
            {
                <li class="cart-item">
                    <img src="@cartItem.ImageRef" alt="@cartItem.MediName" class="product-image">
                    <div class="medicine-details">
                        <h2>@cartItem.MediName</h2>
                        <p>Price: $@cartItem.Price</p>
                        <p>Quantity: @cartItem.Count</p>
                        <button @onclick='() => RemoveFromCart(cartItem.Id)'>Remove from Cart</button>
                    </div>
                </li>
            }
        </ul>
        <button @onclick='ClearCart'>Clear Cart</button>
    </div>
}
else
{
    <p>Your cart is empty.</p>
}

<footer>
    <p>&copy; 2024 Online Pharmacy</p>
</footer>

@code {
    Cart cart = new Cart();
    private IList<Cart>? Carts;

    protected override async Task OnInitializedAsync()
    {
        await LoadCarts();
    }

    private async Task LoadCarts()
    {
        Carts = await _client.GetFromJsonAsync<List<Cart>>($"{Endpoints.CartsEndPoint}");

        if (Carts != null && Carts.Count > 0)
        {
            cart = Carts[0];
        }
    }

    private async Task RemoveFromCart(int medicineId)
    {
        var response = await _client.DeleteAsync($"{Endpoints.CartsEndPoint}/{medicineId}");
        await LoadCarts();
     }

    private async Task ClearCart()
    {
        var response = await _client.DeleteAsync($"{Endpoints.CartsEndPoint}");

        await LoadCarts();
    }
}
