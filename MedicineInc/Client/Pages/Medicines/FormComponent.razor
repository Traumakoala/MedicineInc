@using MedicineInc.Client.Components
@inject HttpClient _client

<EditForm Model="@medicine" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled" >

    <div class="form-group">
        <label>Medicine Name: </label>
        <div>
            <InputText @bind-Value="@medicine.MediName" class="form-control" />
            <ValidationMessage For="@(() => medicine.MediName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Medicine Price: </label>
        <div>
            <InputNumber @bind-Value="@medicine.Price" class="form-control" />
            <ValidationMessage For="@(() => medicine.Price)" />
        </div>
    </div>
    <div class="form-group">
        <label>Featured: </label>
        <div>
            <InputCheckbox @bind-Value="@medicine.Feat" />
        </div>
    </div>
    <div class="form-group">
        <label>Usage: </label>
        <div>
            <InputText @bind-Value="@medicine.Usage" class="form-control" />
            <ValidationMessage For="@(() => medicine.Usage)" />
        </div>
    </div>
    <div class="form-group">
        <label>Upload Image: </label>
        <div>
            <InputFile OnChange="@HandleFileChanged" />
        </div>
    </div>
    @if (!string.IsNullOrEmpty(medicine.ImageRef))
    {
        <div>
            <img src="@medicine.ImageRef" alt="Uploaded Image" style="max-width: 200px; max-height: 200px;" />
        </div>
    }
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="medicines" />
    
</EditForm>

@code {

    

    private IList<Medicine>? Medicines;

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Medicine? medicine { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private async Task HandleFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;

        var fileName = Path.GetFileName(file.Name);

        medicine.ImageRef = "images/" + fileName;

        await _client.PostAsJsonAsync(Endpoints.MedicinesEndPoint, medicine);

    }
}
