@page "/storepage"
@inherits ComponentBase
@inject HttpClient _client
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h1>Main store!</h1>
<link rel="stylesheet" href="css/index.css">

<div class="products-container">
    @if (Medicines != null && Medicines.Any())
    {
        @foreach (var item in Medicines)
        {
            <div class="product">
                <img src="@item.ImageRef" alt="@item.MediName" class="product-image">
                <div class="medicine-details">
                    <h2>@item.MediName</h2>
                    <p>Price: $@item.Price</p>
                    <button @onclick='() => AddToCart(item.Id)'>Add to Cart</button>
                </div>
            </div>
        }
    }
    else
    {
        <div class="product">
            <h2>There are no medicines available in the store!</h2>
        </div>
    }
</div>

<footer>
    <p>&copy; 2024 Online Pharmacy</p>
</footer>

@code {
    private IList<Medicine>? Medicines;
    private IList<Cart>? Carts;
    private IList<Customer>? Customers;
    private int CurrentCustomerId;

    protected override async Task OnInitializedAsync()
    {
        await LoadCarts();
        await LoadMedicines();
        await LoadCustomers();
    }

    private async Task LoadMedicines()
    {
        Medicines = await _client.GetFromJsonAsync<List<Medicine>>($"{Endpoints.MedicinesEndPoint}");
    }

    private async Task LoadCarts()
    {
        Carts = await _client.GetFromJsonAsync<List<Cart>>($"{Endpoints.CartsEndPoint}");
    }

    private async Task LoadCustomers()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndPoint}");
    }

    private async Task AddToCart(int medicineId)
    {
        if (CurrentCustomerId != 0)
        {
            var currentCart = await _client.GetFromJsonAsync<Cart>($"{Endpoints.CartsEndPoint}/{CurrentCustomerId}");

            if (currentCart == null)
            {
                currentCart = new Cart { CustomerId = CurrentCustomerId, CartItems = new List<Medicine>() };
            }

            var existingCartItem = currentCart.CartItems?.FirstOrDefault(item => item.Id == medicineId);

            if (existingCartItem != null)
            {
                existingCartItem.Count++;
            }
            else
            {
                currentCart.CartItems?.Add(new Medicine { Id = medicineId, Count = 1 });
            }

            await _client.PutAsJsonAsync($"{Endpoints.CartsEndPoint}", currentCart);
            await LoadCarts();
        }
    }


    private async Task<int> GetCurrentCustomerId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var customerIdClaim = user.FindFirst("customerId");

        if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out var customerId))
        {
            return customerId;
        }

        return 0;
    }
}
