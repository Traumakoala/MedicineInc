@page "/staffs/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Staff</h3>
<hr />
<br />

<EditForm Model="@staff" OnValidSubmit="CreateStaff">
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>
<div class="form-group">
    <label> Name: </label>
    <div>
        <InputText @bind-Value="staff.StaffName" class="form-control" />
        <ValidationMessage For="@(() => staff.StaffName)" />
    </div>
</div>
<div class="form-group">
    <label> Email: </label>
    <div>
        <InputText @bind-Value="staff.StaffEmail" class="form-control" />
        <ValidationMessage For="@(() => staff.StaffEmail)" />
    </div>
</div>
<div class="form-group">
    <label> Phone Number: </label>
    <div>
        <InputNumber @bind-Value="staff.StaffPhone" class="form-control" />
        <ValidationMessage For="@(() => staff.StaffPhone)" />
    </div>
</div>
<div class="form-group">
    <label>Are you a manager?</label>
    <div>
        <InputCheckbox @bind-Value="staff.IsManager" />
    </div>
</div>
@if (staff.IsManager)
{
    <div class="form-group">
        <label>Manager ID:</label>
        <div>
            <InputSelect @bind-Value="staff.ManagerID" class="form-control">
                <option value="">Select ID</option>
                @if (Branches != null)
                {
                    foreach (var branch in Branches)
                    {
                        <option value=" @branch.ManagerID">@branch.ManagerID</option>
                    }
                }
                    
            </InputSelect>
            <ValidationMessage For="@(() => staff.ManagerID)" />
        </div>
    </div>
}
<div class="form-group">
    <label>Branch:</label>
    <div>
        <InputSelect @bind-Value="staff.BranchID" class="form-control">
            <option value="">Select Branch</option>
            @if (Branches != null)
            {
                foreach (var branch in Branches)
                {
                    <option value=" @branch.Id">@branch.BranchName</option>
                }
            }

        </InputSelect>
        <ValidationMessage For="@(() => staff.BranchID)" />
    </div>
</div>
@code {
    Staff staff = new Staff();

    private IList<Staff>? Staffs;
    private IList<MedicineInc.Shared.Domain.Branch>? Branches;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndPoint}");
        Branches = await _client.GetFromJsonAsync<List<MedicineInc.Shared.Domain.Branch>>($"{Endpoints.BranchesEndPoint}");
    }

    private async Task CreateStaff()
    {
        await _client.PostAsJsonAsync(Endpoints.StaffsEndPoint, staff);
        _navManager.NavigateTo("/");
    }

}
