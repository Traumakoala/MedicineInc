@page "/"
@inject HttpClient _client
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js

<PageTitle>Index</PageTitle>
<h1>Featured Items!</h1>
<link href="css/index.css" rel="stylesheet" />

<div class="products-container">
    @if (Medicines != null && Medicines.Any())
    {
        @foreach (var item in Medicines.Where(q => q.Feat).Take(4))
        {
            <div class="product">
                <img src="@item.ImageRef" alt="@item.MediName" class="product-image">
                <div class="medicine-details">
                    <h2>@item.MediName</h2>
                    <p>Price: $@item.Price</p>
                    <div class="quantity-input">
                        <input type="number" @bind="item.Count" min="1" />
                        <button @onclick='() => AddToCart(item.Id, item.Count)'>Add to Cart</button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="product">
            <h2>There are no featured items today!</h2>
        </div>
    }
</div>

<footer>
    <p>&copy; 2024 Online Pharmacy</p>
</footer>

@code {
    private IList<Medicine>? Medicines;
    private IList<Cart>? Carts;
    private IList<Customer>? Customers;

    protected override async Task OnInitializedAsync()
    {
        await LoadMedicines();
        await LoadCarts();
        await LoadCustomers();
    }

    private async Task LoadMedicines()
    {
        Medicines = await _client.GetFromJsonAsync<List<Medicine>>($"{Endpoints.MedicinesEndPoint}");
    }

    private async Task LoadCarts()
    {
        Carts = await _client.GetFromJsonAsync<List<Cart>>($"{Endpoints.CartsEndPoint}");
    }

    private async Task LoadCustomers()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndPoint}");
    }

    private async Task AddToCart(int medicineId, int count)
    {
        Cart cart = new Cart();
        var selectedMedicine = Medicines?.FirstOrDefault(m => m.Id == medicineId);
        var cartItem = new Medicine
            {
                Id = medicineId,
                MediName = selectedMedicine.MediName,
                Price = selectedMedicine.Price,
                Feat = selectedMedicine.Feat,
                Count = count,
                Usage = selectedMedicine.Usage,
                ImageRef = selectedMedicine.ImageRef
            };

        if (cart.CartItems == null)
        {
            cart.CartItems = new List<Medicine>();
        }

        cart.CartItems.Add(cartItem);

        cart.CustomerId = 1;

        var response = await _client.PostAsJsonAsync($"{Endpoints.CartsEndPoint}/", cart);
        await LoadMedicines();
        await LoadCarts();
    }
}
