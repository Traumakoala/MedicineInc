@page "/branches/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
<h3 class="card-title">Make Branch</h3>

@if (Branches == null)
{
    <div class = "alert alert-info">Loading Names...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var branch in Branches)
            {
                <tr>
                    <td>@branch.BranchName</td>
                    <td>
                        <a href=" /branch/view/@branch.Id" class=" btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href=" /branch/edit/@branch.Id" class=" btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-warning" @onclick="@(()=>Delete(branch.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Branch>? Branches;

    protected async override  Task OnInitializedAsync()
    {
        Branches = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchesEndPoint}");
    }

    async Task Delete(int BranchID)
    {
        if (Branches != null)
        {
            var branch = Branches.First(q => q.Id == BranchID);
            var confirm = await js.InvokeAsync<bool>("Confirm", $"Do you want to delete {branch.BranchName}?");
            if(confirm)
            {
                await _client.DeleteAsync($"api/branches/{BranchID}");
                await OnInitializedAsync();
            }
        }
    }
}
