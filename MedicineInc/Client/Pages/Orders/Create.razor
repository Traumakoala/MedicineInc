@page "/orders/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Order</h3>
<hr />
<br />

<EditForm Model="@order" OnValidSubmit="CreateOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Branch ID: </label>
        <div>
            <InputNumber @bind-Value="@order.BranchID" class="form-control" />
            <ValidationMessage For="@(() => order.BranchID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="@order.CustomerID" class="form-control">
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id">@customer.CustomerName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => order.CustomerID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Order Done: </label>
        <div>
            <InputCheckbox @bind-Value="@order.OrderDone" />
        </div>
    </div>

    <div class="form-group">
        <label>Order Details: </label>
        <div>
            @if (order.OrderDetails != null && order.OrderDetails.Any())
            {
                <ul>
                    @foreach (var medicine in order.OrderDetails)
                    {
                        <li>@medicine.MediName - @medicine.Price</li>
                    }
                </ul>
            }
            else
            {
                <p>No medicines added to the order</p>
            }
        </div>
    </div>

    <div class="form-group">
        <label>Add Medicine to Order: </label>
        <div>
            <InputSelect @bind-Value="@selectedMedicineId" class="form-control">
                <option value="">Select Medicine</option>
                @foreach (var medicine in Medicines)
                {
                    <option value="@medicine.Id">@medicine.MediName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => selectedMedicineId)" />
            <button type="button" class="btn btn-primary" @onclick="AddMedicineToOrder">Add Medicine</button>
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Order
    </button>
</EditForm>

@code {
    Order order = new Order();
    private int selectedMedicineId;
    private IList<Customer>? Customers;
    private IList<Medicine>? Medicines;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndPoint}");
        Medicines = await _client.GetFromJsonAsync<List<Medicine>>($"{Endpoints.MedicinesEndPoint}");
    }

    private void AddMedicineToOrder()
    {
        if (selectedMedicineId != 0)
        {
            var selectedMedicine = Medicines.FirstOrDefault(m => m.Id == selectedMedicineId);
            if (selectedMedicine != null)
            {
                order.OrderDetails ??= new List<Medicine>();
                order.OrderDetails.Add(selectedMedicine);
            }
        }
    }

    private async Task CreateOrder()
    {
        await _client.PostAsJsonAsync(Endpoints.OrdersEndPoint, order);
        _navManager.NavigateTo("/orders/");
    }
}
